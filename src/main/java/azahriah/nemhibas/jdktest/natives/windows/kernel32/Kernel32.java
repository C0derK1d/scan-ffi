// Generated by jextract

package azahriah.nemhibas.jdktest.natives.windows.kernel32;

import java.lang.invoke.MethodHandle;

import jdk.incubator.foreign.*;

public class Kernel32  {

    static {
        System.loadLibrary("Kernel32");
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ Kernel32() {}
    public static int PAGE_READWRITE() {
        return (int)4L;
    }
    public static int MEM_COMMIT() {
        return (int)4096L;
    }
    public static MethodHandle CloseHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CloseHandle$MH,"CloseHandle");
    }
    public static int CloseHandle ( Addressable hObject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.CloseHandle$MH, "CloseHandle");
        try {
            return (int)mh$.invokeExact(hObject.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$0.OpenProcess$MH,"OpenProcess");
    }
    public static MemoryAddress OpenProcess ( int dwDesiredAccess,  int bInheritHandle,  int dwProcessId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.OpenProcess$MH, "OpenProcess");
        try {
            return (MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualQueryEx$MH() {
        return RuntimeHelper.requireNonNull(constants$0.VirtualQueryEx$MH,"VirtualQueryEx");
    }
    public static long VirtualQueryEx ( Addressable hProcess,  Addressable lpAddress,  Addressable lpBuffer,  long dwLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.VirtualQueryEx$MH, "VirtualQueryEx");
        try {
            return (long)mh$.invokeExact(hProcess.address(), lpAddress.address(), lpBuffer.address(), dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadProcessMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$0.ReadProcessMemory$MH,"ReadProcessMemory");
    }
    public static int ReadProcessMemory ( Addressable hProcess,  Addressable lpBaseAddress,  Addressable lpBuffer,  long nSize,  Addressable lpNumberOfBytesRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.ReadProcessMemory$MH, "ReadProcessMemory");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpBaseAddress.address(), lpBuffer.address(), nSize, lpNumberOfBytesRead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SYNCHRONIZE() {
        return (int)1048576L;
    }
    public static int STANDARD_RIGHTS_REQUIRED() {
        return (int)983040L;
    }
    public static int PROCESS_ALL_ACCESS() {
        return (int)2097151L;
    }
}


